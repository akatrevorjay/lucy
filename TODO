###
### Lucy TODO List
###

#helpful regexes
# change $lucy->blah($1, $2); to $lucy->yield(blah, $1, $2);
from	| \$lucy\-\>([\w]+)(?:\(([^\)]+)\))?\;
to		| \$lucy\-\>yield\($1, $2\)\;
# change $lucy->yield(blah, $1, $2) to $lucy->yield(blah => $1 => $2)
from	| 
to		| 

######
###### HIGH
######

### State Plugin
Move the $lucy->{state} into the db. Way too much information is duplicated imo, and
 I would like to reduce that.
Update the code to whats in PoCo::IRC::State again. They've been busy, and I have been lazy.
# DB Psuedo-format
lucy_state_users = {
	id => 0,
	nick => 'trevorj',
	
}

### User info in subs
# - There is a problem with the way the information is handled to the events imo.
We should keep track of the users, channels; see above; and hand a user hash to the events.
What about a user object?? That would be sweet, we could have helper functions for grabbing the full mask, etc
$user = {
	nick		=> 'lamer',
	username	=> 'evilllama',
	host		=> 'goatse.cx',
	
	ircname		=> 'Muahaaha',
};

### NickTrakar plugin
#	- track nick changes, have an aliases column? IMPORTANTE!!!! MUCHOS!

######
###### MEDIUM
######
	
### Plugin architecture
POE::Component::Pool::Thread - A POE Managed Boss/Worker threadpool.
POE::Component::ForkManager - Perl extension for managing a preforking server in POE
POE::Component::JobQueue - a component to manage queues and worker pools
#
POE::Component::IRC::Plugin::PlugMan, a POE::Component::IRC plugin that provides plugin management services.
POE::Component::IRC::Pipeline - the plugin pipeline for POE::Component::IRC.
### Logging
# I want to redo logging. I want a log message system like
--> POE::Component::SimpleLog - Perl extension to manage a simple logging system for POE.
# that way I can dcc chat into lucy and see certain levels of messages
### IO ( logging, etc )
# What about sqlite logging?
POE::Wheel::ReadWrite - buffered non-blocking I/O
POE::Component::Logger - A POE logging class
### RSS Parsing
http://search.cpan.org/~sungo/POE-Component-RSS-0.08/lib/POE/Component/RSS.pm
POE::Component::RSSAggregator - Watch Muliple RSS Feeds for New Headlines

######
###### LOW
######


#####
##### modules to look into
#####
Filesys::Virtual::SSH - remote execution Virtual Filesystem
### RPC
POE::Component::Server::XMLRPC - publish POE event handlers via XMLRPC over HTTP

### Database
POE::Component::EasyDBI - Perl extension for asynchronous non-blocking DBI calls in POE

###### Plugins
### Shorten URLS on demand
POE::Component::WWW::Shorten - A non-blocking wrapper around WWW::Shorten.
WWW::Shorten
### AI MegaHAL
POE::Component::AI::MegaHAL -- A non-blocking wrapper around AI::MegaHAL.
### Console
POE::Component::IRC::Plugin::Console - a lightweight debugging and control console for POE::Component::IRC bots.

###
### STATS
###
# FastCGI stats server as a plugin?? oooh
POE::Component::FastCGI - POE FastCGI server



############
############ Old code, may come in handy some day
############

#####
## Generic cache object
##
##
# Options ##################################################################
#
# Debug =>      0 - DEFAULT, no debugging output
#               1 - prints cache statistics upon destroying
#               2 - prints detailed debugging info
#
# MaxCount =>   Maximum entries in cache.
#
# MaxBytes =>   Maximum bytes taken in memory for cache based on approximate
#               size of total cache structure in memory
#
#               There is approximately 240 bytes used per key/value pair in the cache for
#               the cache data structures, so a cache of 5000 entries would take
#               at approximately 1.2M plus the size of the data being cached.
#
# MaxSize  =>   Maximum size of each cache entry. Larger entries are not cached.
#                   This helps prevent much of the cache being flushed when
#                   you set an exceptionally large entry.  Defaults to MaxBytes/10
#
# WriteSync =>  1 - DEFAULT, write() when data is dirtied for
#                   TRUE CACHE (see below)
#               0 - write() dirty data as late as possible, when leaving
#                   cache, or when cache is being DESTROY'd
#
############################################################################
#package Lucy::CacheLRU;
#use warnings;
#use strict;
#use vars qw(@ISA);
#@ISA = qw(Tie::Cache);
#
#sub read {
#	my ( $self, $key ) = @_;
#	print "cache miss for $key, read() data\n";
#	undef;
#}
#
#sub write {
#	my ( $self, $key, $value ) = @_;
#	print "flushing [$key, $value] from cache, write() data\n";
#}
#
#1;

######
### Generic ancessor object.
### Could come in handy ;) especially to subclass.
###
##TODO make this capable of being an LRU cache
#package Lucy::GenericObject;
#use strict;
#use Carp;
#use vars qw($AUTOLOAD);
#
#sub AUTOLOAD {
#	my $self = shift;
#	my $attr = $AUTOLOAD;
#	$attr =~ s/.*:://;
#	return unless $attr =~ /[^A-Z]/;    # skip DESTROY and all-cap methods
#	return 1 if ( $attr =~ /_init|_put|_get|_delete/ );
#
#	# Are there any args? if so, put.
#	if (@_) {
#		$self->put( $attr, @_ );
#	}
#	return $self->get($attr);
#}
#
## get rid of it
#sub delete {
#	my ( $self, $attr ) = @_;
#
#	# Convert to uppercase if case insensitive?
#	$attr = uc $attr if defined $self->{case_insensitive};
#
#	#TODO should this only delete the key if the _delete function returns ok?
#	if ( $self->_delete($attr) ) {
#		delete $self->{$attr};
#		return 1;
#	}
#	return undef;
#}
#
## we're saving something.
#sub put {
#	my ( $self, $attr ) = @_;
#
#	# Convert to uppercase if case insensitive
#	$attr = uc $attr if defined $self->{case_insensitive};
#
#	# do we have a defined set of fields?
#	if ( defined $self->{fields} ) {
#		return undef unless defined $self->{fields}{$attr};
#	}
#
#	if ( my $data = shift ) {
#
#		#TODO should this only put the data if the _put function returns ok?
#		if ( $self->_put( $attr, $data ) ) {
#			$self->{data}{$attr} = $data;
#			return 1;
#		}
#	} else {
#		#return $self->delete($attr);
#	}
#
#	return undef;
#}
#
## get it damnit.
#sub get {
#	my ( $self, $attr ) = @_;
#
#	# Convert to uppercase if case insensitive
#	$attr = uc $attr if defined $self->{case_insensitive};
#
#	$self->{data}{$attr} = $self->_get($attr)
#	  unless defined $self->{data}{$attr};
#	return $self->{data}{$attr} || undef;
#}
#
#sub new {
#	my $class = shift;
#
#	#my $class = ref($proto) || $proto;
#	#my $parent = ref($proto) && $proto;
#
#	my %params;
#	if ( @_ % 2 ) {
#		%params = @_;
#
#		# Convert to uppercase if case insensitive
#		if ( $params{case_insensitive} ) {
#			foreach ( keys %{ $params{data} } ) {
#				next if uc($_) eq $_;
#				$params{data}{ uc $_ } = $params{data}{$_};
#				delete $params{data}{$_};
#			}
#		}
#	}
#	my $self = bless \%params, $class;
#	undef %params;
#	$self->_init;
#	return $self;
#}
#
#1;
